{"version":3,"sources":["components/Section.js","components/Statistics.js","components/FeedbackOptions.js","components/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","className","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","onGoodClick","onNeutralClick","onBadClick","onClick","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAgBeA,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASC,UAAU,YAAnB,UACE,6BAAKF,IACJC,MCgBQE,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,sBAAKN,UAAU,kBAAf,UACE,uCAAUE,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WCSSC,EAhBS,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,WACtD,OACE,qBAAIV,UAAU,gBAAd,UACE,6BAAI,wBAAQW,QAASH,EAAjB,oBACJ,6BAAI,wBAAQG,QAASF,EAAjB,uBACJ,6BAAI,wBAAQE,QAASD,EAAjB,uBCGKE,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KC+CEC,MA5Cf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOb,EAAP,KAAac,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOZ,EAAP,KAAgBc,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOX,EAAP,KAAYc,EAAZ,KAEA,SAASC,IACP,OAAOjB,EAAOC,EAAUC,EAO1B,OACE,qCACE,qBAAKJ,UAAU,YAAf,SACE,4CAGF,cAAC,EAAD,CAASF,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEU,YAAa,kBAAMQ,EAAQd,EAAO,IAClCO,eAAgB,kBAAMQ,EAAWd,EAAU,IAC3CO,WAAY,kBAAMQ,EAAOd,EAAM,QAInC,cAAC,EAAD,CAASN,MAAO,cAAhB,SACGqB,IACC,cAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOc,IACPb,mBAxBDc,KAAKC,MAAOnB,GAAQA,EAAOC,EAAUC,GAAQ,OA2B9C,cAAC,EAAD,CAAcS,QAAQ,4BChCjBS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b68fbf79.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className=\"container\">\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div className=\"statistics-list\">\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}%</p>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ onGoodClick, onNeutralClick, onBadClick }) => {\n  return (\n    <ul className=\"feedback-list\">\n      <li><button onClick={onGoodClick}>Good</button></li>\n      <li><button onClick={onNeutralClick}>Neutral</button></li>\n      <li><button onClick={onBadClick}>Bad</button></li>\n    </ul>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  onGoodClick: PropTypes.func.isRequired,\n  onNeutralClick: PropTypes.func.isRequired,\n  onBadClick: PropTypes.func.isRequired\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Section from \"./components/Section\";\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Notification from \"./components/Notification\";\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  function countTotalFeedback() {\n    return good + neutral + bad;\n  }\n\n  function countPositiveFeedbackPercentage() {\n    return Math.round((good / (good + neutral + bad)) * 100);\n  }\n\n  return (\n    <>\n      <div className=\"container\">\n        <h1>Feedback</h1>\n      </div>\n\n      <Section title={\"Please leave feedback\"}>\n        <FeedbackOptions\n          onGoodClick={() => setGood(good + 1)}\n          onNeutralClick={() => setNeutral(neutral + 1)}\n          onBadClick={() => setBad(bad + 1)}\n        />\n      </Section>\n\n      <Section title={\"Statistics:\"}>\n        {countTotalFeedback() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}